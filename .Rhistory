pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
} else {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2 + candidatepValues$as[4]*(nrow(data.set))^3) >= 0
&& (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2 + candidatepValues$af[4]*(nrow(data.set))^3) >= 0
# && (1-candidatepValues$af[1]+candidatepValues$as[1]) >= 0
&& (1 - (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2 + candidatepValues$af[4]*(nrow(data.set))^3) -
(candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2 + candidatepValues$as[4]*(nrow(data.set))^3)) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
}
} else if (no.param.per.var == 3) {
if (with.storage == T) {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$k[1] + candidatepValues$k[2]*(nrow(data.set)) + candidatepValues$k[3]*(nrow(data.set))^2) <= 1
&& (candidatepValues$k[1] + candidatepValues$k[2]*(nrow(data.set)) + candidatepValues$k[3]*(nrow(data.set))^2) >=0
&& (candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2) >= 0
&& (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2) >= 0
&& (1 - (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2) -
(candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2)) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
} else {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2) >= 0
&& (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2) >= 0
&& (1 - (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set)) + candidatepValues$af[3]*(nrow(data.set))^2) -
(candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)) + candidatepValues$as[3]*(nrow(data.set))^2)) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
}
} else if (no.param.per.var == 2) {
if (with.storage == T) {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$k[1] + candidatepValues$k[2]*(nrow(data.set))) <= 1
&& (candidatepValues$k[1] + candidatepValues$k[2]*(nrow(data.set))) >= 0
&& (candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set))) >= 0
&& (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set))) >= 0
&& (1 - (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set))) -
(candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)))) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
} else {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set))) >= 0
&& (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set))) >= 0
&& (1 - (candidatepValues$af[1] + candidatepValues$af[2]*(nrow(data.set))) -
(candidatepValues$as[1] + candidatepValues$as[2]*(nrow(data.set)))) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
}
} else if (no.param.per.var == 1) {
if (with.storage == T) {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$k[1]) <= 1
&& (candidatepValues$k[1]) >= 0
&& (candidatepValues$as[1]) >= 0
&& (candidatepValues$af[1]) >= 0
&& (1 - candidatepValues$af[1] - candidatepValues$as[1]) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
} else {
if ( log(runif(1, min = 0, max =1)) < logalpha && (candidatepValues$as[1]) >= 0
&& (candidatepValues$af[1]) >= 0
&& (1 - candidatepValues$af[1] - candidatepValues$as[1]) >= 0 ) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
}
} else {
if ( log(runif(1, min = 0, max =1)) < logalpha && candidatepValues >= 0 && all((candidatepValues$af + candidatepValues$as) < 1)) {
pValues <- candidatepValues
logPrior0 <- logPrior1
logL0 <- logL1
}
}
}
if (with.storage==T) {
pChain[c,] <- c(pValues$k,pValues$Y,pValues$af,pValues$as,logL0) # Assign the first parameter set with log likelihood
} else {
pChain[c,] <- c(pValues$Y,pValues$af,pValues$as,logL0) # Assign the first parameter set with log likelihood
}
}
pChain <- pChain[(bunr_in+1):nrow(pChain),]
pChain = as.data.frame(pChain)
if (no.param.per.var < 5) {
if (with.storage==T) {
if (no.param.per.var[z]==1) {
names(pChain) <- c("k1","Y1","af1","as1","logli")
} else if (no.param.per.var[z]==2) {
names(pChain) <- c("k1","k2","Y1","Y2","af1","af2","as1","as2","logli")
} else if (no.param.per.var[z]==3) {
names(pChain) <- c("k1","k2","k3","Y1","Y2","Y3","af1","af2","af3","as1","as2","as3","logli")
}
} else {
if (no.param.per.var[z]==1) {
names(pChain) <- c("Y1","af1","as1","logli")
} else if (no.param.per.var[z]==2) {
names(pChain) <- c("Y1","Y2","af1","af2","as1","as2","logli")
} else if (no.param.per.var[z]==3) {
names(pChain) <- c("Y1","Y2","Y3","af1","af2","af3","as1","as2","as3","logli")
}
}
}
param.set = colMeans(pChain[ , 1:(no.param*no.var)])
param.SD = apply(pChain[ , 1:(no.param*no.var)], 2, sd)
param.final = data.frame(matrix(ncol = (no.var)*2, nrow = no.param))
names(param.final) <- c("Y","af","as","Y_SD","af_SD","as_SD")
param.final$Y = param.set[1:no.param]
param.final$af = param.set[(1+no.param):(2*no.param)]
param.final$as = param.set[(1+2*no.param):(3*no.param)]
# param.final$sf = param.set[(1+3*no.param):(4*no.param)]
# param.final$sr = param.set[(1+4*no.param):(5*no.param)]
param.final$Y_SD = param.SD[1:no.param]
param.final$af_SD = param.SD[(1+no.param):(2*no.param)]
param.final$as_SD = param.SD[(1+2*no.param):(3*no.param)]
# param.final$sf_SD = param.SD[(1+3*no.param):(4*no.param)]
# param.final$sr_SD = param.SD[(1+4*no.param):(5*no.param)]
if (with.storage==T) {
output.final.set = model(no.param,data.set,param.final$Y,
param.final$k,param.final$af,param.final$as)
} else {
output.final.set = model.without.storage(no.param,data.set,param.final$Y,
param.final$af,param.final$as)
}
output.final = output.final.set
# Calculate daily parameter values with SD
Days <- seq(1,nrow(data.set), length.out=nrow(data.set))
param.daily = param.final[1,]
if (no.param == 1) {
for (i in 2:length(Days)) {
param.daily[i,] = param.final[1,]
}
}
if (no.param == 2) {
for (i in 2:length(Days)) {
param.daily[i,1:no.var] = param.final[1,1:no.var] + param.final[2,1:no.var] * i
}
for (i in (no.var+1):(2*no.var)) {
param.daily[,i] = ((param.final[1,i]^2 + param.final[2,i]^2)/2)^0.5
}
}
if (no.param == 3) {
for (i in 2:length(Days)) {
param.daily[i,1:no.var] = param.final[1,1:no.var] + param.final[2,1:no.var] * i + param.final[3,1:no.var] * i^2
}
for (i in (no.var+1):(2*no.var)) {
param.daily[,i] = ((param.final[1,i]^2 + param.final[2,i]^2 + param.final[3,i]^2)/3)^0.5
}
}
if (no.param == 4) {
for (i in 2:length(Days)) {
param.daily[i,1:no.var] = param.final[1,1:no.var] + param.final[2,1:no.var] * i + param.final[3,1:no.var] * i^2 + param.final[4,1:no.var] * i^3
}
for (i in (no.var+1):(2*no.var)) {
param.daily[,i] = ((param.final[1,i]^2 + param.final[2,i]^2 + param.final[3,i]^2 + param.final[4,i]^3)/4)^0.5
}
}
param.daily$ar = 1 - param.daily$af - param.daily$as
param.daily$ar_SD = with(param.daily, ((af_SD*af_SD + as_SD*as_SD)/2)^0.5)
param.daily$Date = as.Date(data.set$Date)
# Plotting the parameter sets over time
if (with.storage==T) {
melted.param1 = melt(param.daily[,c("k","Y","af","as","ar","Date")], id.vars="Date")
melted.param2 = melt(param.daily[,c("k_SD","Y_SD","af_SD","as_SD","ar_SD","Date")], id.vars="Date")
} else {
melted.param1 = melt(param.daily[,c("Y","af","as","ar","Date")], id.vars="Date")
melted.param2 = melt(param.daily[,c("Y_SD","af_SD","as_SD","ar_SD","Date")], id.vars="Date")
}
melted.param = data.frame(melted.param1$Date, melted.param1$variable, melted.param1$value, melted.param2$value)
names(melted.param) = c("Date","variable","Parameter","Parameter_SD")
melted.param$Date = as.Date(melted.param$Date)
melted.param$treatment = treat.group[v]
# melted.param$volume.group = as.factor(v1)
melted.param$no.param = as.factor(no.param.per.var[z])
View(param.daily)
View(output.final)
output.final$Date = data.set$Date
names(output.final) = c("Mleaf.modelled","Mwood.modelled","Mroot.modelled","Rm","Date")
melted.output = melt(output.final[,c("Mleaf.modelled","Mwood.modelled","Mroot.modelled","Rm","Date")], id.vars="Date")
melted.data = melt(data.set[ , c("LM","WM","RM","Date")], id.vars="Date")
melted.error = melt(data.set[ , c("LM_SE","WM_SE","RM_SE","Date")], id.vars="Date")
melted.data$Date = as.Date(melted.data$Date)
melted.error$Date = as.Date(melted.error$Date)
melted.error$treatment = as.factor(treat.group[v])
melted.error$parameter = melted.data$value
melted.output$Date = as.Date(melted.output$Date)
melted.data$treatment = as.factor(treat.group[v])
melted.output$treatment = as.factor(treat.group[v])
melted.output$no.param = as.factor(ceiling(no.param.per.var[z]))
q
summary.data = melted.data
summary.error = melted.error
summary.output = melted.output
if (with.storage==T) {
summary.Cstorage = melted.Cstorage
}
summary.param = melted.param
nAccepted = length(unique(pChain[,1]))
acceptance = (paste("Treatment =",treat.group[v],", Total Parameter number =",ceiling(no.param.per.var[z]),": ", nAccepted, "out of ", chainLength-bunr_in, "candidates accepted ( = ",
round(100*nAccepted/chainLength), "%)"))
print(acceptance)
png(file = paste("output/Parameter_iterations_day1_treatment_",treat.group[v],"_par_",no.param.per.var[z], ".png", sep = ""))
par(mfrow=c(3,3),oma = c(0, 0, 2, 0))
if (with.storage==T) {
plot(pChain[,1],col="red",main="Utilization coefficient at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="k",ylim=c(param.k[1,1],param.k[1,3]))
plot(pChain[,1+no.param],col="green",main="Alloc frac to Biomass at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="Y",ylim=c(param.Y[1,1],param.Y[1,3]))
plot(pChain[,1+2*no.param],col="magenta",main="Alloc frac to foliage at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="af",ylim=c(param.af[1,1],param.af[1,3]))
plot(pChain[,1+3*no.param],col="blue",main="Alloc frac to wood at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="as",ylim=c(param.as[1,1],param.as[1,3]))
# plot(pChain[,1+4*no.param],col="green",main="Foliage turnover at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="sf",ylim=c(param.sf[1,1],param.sf[1,3]))
# plot(pChain[,1+5*no.param],col="magenta",main="Root turnover at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="sr",ylim=c(param.sr[1,1],param.sr[1,3]))
plot(pChain[,1+4*no.param],col="cyan",main="Log-likelihood",cex.lab = 1.5,xlab="Iterations",ylab="Log-likelihood")
} else {
plot(pChain[,1],col="green",main="Alloc frac to Biomass at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="Y",ylim=c(param.Y[1,1],param.Y[1,3]))
plot(pChain[,1+no.param],col="magenta",main="Alloc frac to foliage at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="af",ylim=c(param.af[1,1],param.af[1,3]))
plot(pChain[,1+2*no.param],col="blue",main="Alloc frac to wood at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="as",ylim=c(param.as[1,1],param.as[1,3]))
# plot(pChain[,1+3*no.param],col="green",main="Foliage turnover at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="sf",ylim=c(param.sf[1,1],param.sf[1,3]))
# plot(pChain[,1+4*no.param],col="magenta",main="Root turnover at Day 1",cex.lab = 1.5,xlab="Iterations",ylab="sr",ylim=c(param.sr[1,1],param.sr[1,3]))
plot(pChain[,1+3*no.param],col="cyan",main="Log-likelihood",cex.lab = 1.5,xlab="Iterations",ylab="Log-likelihood")
}
title(main = paste("First day Parameter iterations for treatment group",treat.group[v],"with par",no.param.per.var[z]), outer=TRUE, cex = 1.5)
dev.off()
output.final1 = output.final.set
View(output.final1)
output.final1 = output.final.set
if (with.storage==T) {
names(output.final1) = c("Cstorage","Mleaf","Mwood","Mroot","Rm") # Rename for the logLikelihood function
} else {
names(output.final1) = c("Mleaf","Mwood","Mroot","Rm")
}
aic.bic[q,1] <- logLikelihood.great.final(no.param.per.var,data.set,output.final1,with.storage,model.comparison) # Calculate logLikelihood
k1 = 2 # k = 2 for the usual AIC
npar = no.param*no.var # npar = total number of parameters in the fitted model
aic.bic[q,2] = -2*aic.bic[q,1] + k1*npar
if (model.comparison==F) {
n = sum(!is.na(data.set$LM)) + sum(!is.na(data.set$WM)) + sum(!is.na(data.set$RM))
} else {
n = sum(!is.na(data.set$LM)) + sum(!is.na(data.set$WM)) + sum(!is.na(data.set$RM))
}
k2 = log(n) # n being the number of observations for the so-called BIC
aic.bic[q,3] = -2*aic.bic[q,1] + k2*npar
time$end.time[q] <- Sys.time()
time$time.taken[q] <- time$end.time[q] - time$start.time[q]
aic.bic[q,4] = time$time.taken[q]
aic.bic[q,5] = no.param
aic.bic[q,6] = as.factor(treat.group[v])
aic.bic
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=1000,with.storage=F, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
bic
plot.Modelled.parameters.great(result,with.storage=F,treat.group)
plot.Modelled.biomass.great(result,with.storage=F,treat.group)
nlevels(treat.group)
result
source("R/functions_great.R")
source("R/functions_great_CBM.R")
plot.Modelled.parameters.great(result,with.storage=F,treat.group)
plot.Modelled.biomass.great(result,with.storage=F,treat.group)
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=5000,with.storage=F, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
#-------------------------------------------------------------------------------------
# Plot parameters and biomass data fit
plot.Modelled.parameters.great(result,with.storage=F,treat.group)
plot.Modelled.biomass.great(result,with.storage=F,treat.group)
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=5000,with.storage=T, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
#-------------------------------------------------------------------------------------
# Plot parameters and biomass data fit
plot.Modelled.parameters.great(result,with.storage=T,treat.group)
plot.Modelled.biomass.great(result,with.storage=T,treat.group)
bic
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=5000,with.storage=T, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
#-------------------------------------------------------------------------------------
# Plot parameters and biomass data fit
plot.Modelled.parameters.great(result,with.storage=T,treat.group)
plot.Modelled.biomass.great(result,with.storage=T,treat.group)
data.biomass = read.csv("processed_data/modelled_data.csv") # Estimated biomass from height and dia
names(data.biomass) = c("Date","Room","LA","LA_SE","LM","LM_SE","WM","WM_SE","RM","RM_SE")
data.biomass$Date = as.Date(data.biomass$Date, format = "%Y-%m-%d")
# data.biomass = subset(data.biomass,(Date %in% as.Date(c("2016-01-08","2016-01-18","2016-01-28","2016-02-08","2016-02-29"))))
data.biomass = subset(data.biomass,(Date %in% as.Date(c("2016-01-08","2016-01-18","2016-01-28","2016-02-08","2016-02-29"))))
data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA_29-02-2016.csv")
# data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA_v3.csv") # Corrected by Dushan for diurnal temperature variation on 21/03/2018
keeps = c("Date","Room","GPP","R_leaf","R_leaf_se","R_stem","R_stem_se","R_root","R_root_se")
data.gpp = data.gpp[ , keeps, drop = FALSE]
names(data.gpp) = c("Date","Room","GPP","R_leaf","R_leaf_SE","R_wood","R_wood_SE","R_root","R_root_SE")
data.gpp$Date = as.Date(data.gpp$Date, format = "%Y-%m-%d")
data.all = merge(data.gpp, data.biomass, by=c("Date","Room"), all=TRUE)
treat.group = as.factor(c("1","4","6")) # Assign few treatments to check the results
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=5000,with.storage=T, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
#-------------------------------------------------------------------------------------
# Plot parameters and biomass data fit
plot.Modelled.parameters.great(result,with.storage=T,treat.group)
plot.Modelled.biomass.great(result,with.storage=T,treat.group)
data.biomass = read.csv("processed_data/modelled_data.csv") # Estimated biomass from height and dia
names(data.biomass) = c("Date","Room","LA","LA_SE","LM","LM_SE","WM","WM_SE","RM","RM_SE")
data.biomass$Date = as.Date(data.biomass$Date, format = "%Y-%m-%d")
# Data up to the end of experiment (29th February)
data.biomass = subset(data.biomass,(Date %in% as.Date(c("2016-01-08","2016-01-18","2016-01-28","2016-02-08","2016-02-29"))))
data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA_29-02-2016.csv")
keeps = c("Date","Room","GPP","R_leaf","R_leaf_se","R_stem","R_stem_se","R_root","R_root_se")
data.gpp = data.gpp[ , keeps, drop = FALSE]
names(data.gpp) = c("Date","Room","GPP","R_leaf","R_leaf_SE","R_wood","R_wood_SE","R_root","R_root_SE")
data.gpp$Date = as.Date(data.gpp$Date, format = "%Y-%m-%d")
data.all = merge(data.gpp, data.biomass, by=c("Date","Room"), all=TRUE)
treat.group = as.factor(c("1","4","6")) # Assign few treatments to check the results
cbPalette = rainbow(6)[rank(1:6)]
p0 = ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") + scale_color_manual(values=cbPalette) +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# png(file = "Output/GPP.png")
pdf(file = "Output/GPP_v2.pdf",width=10, height=5)
print (p0)
dev.off()
source("R/C_balance_great.R")
source("R/C_balance_great.R")
source("R/sla_great.R")
source("R/functions_great.R")
source("R/functions_great_CBM.R")
# Assign treatment groups
# treat.group = unique(as.factor(data.all$Room)) # Assign all treatments
treat.group = as.factor(c("1","4","6")) # Assign few treatments to check the results
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","treat.group","tnc"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, mcmc.great, with.storage=rep(T,6), model.comparison=rep(F,6), model.optimization=rep(F,6),
#                      no.param.par.var=rep(3,6),
#                      treat.group=treat.group,
#                      MoreArgs=list(chainLength=3000))
result <- clusterMap(cluster, mcmc.great,
treat.group=treat.group,
MoreArgs=list(chainLength=5000,with.storage=T, model.comparison=F, model.optimization=F,
no.param.per.var=3))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = nlevels(treat.group))
for (i in 1:nlevels(treat.group)) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
sum(bic$bic)
#-------------------------------------------------------------------------------------
# Plot parameters and biomass data fit
plot.Modelled.parameters.great(result,with.storage=T,treat.group)
plot.Modelled.biomass.great(result,with.storage=T,treat.group)
bic
