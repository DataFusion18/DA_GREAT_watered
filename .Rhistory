annotate("text", x = (min(df1[,2])*4), y = (max(df1[,3])*0.9), size = font.size-8,
label = paste("Dots = Predicted", "\nTriangles = Harvest")) +
theme(legend.title = element_text(colour="black", size=font.size-3)) +
theme(legend.text = element_text(colour="black", size = font.size-5)) +
theme(legend.position = c(0.8,0.3)) + theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_text(size = font.size)) + theme(axis.title.y = element_text(size = font.size)) +
theme(legend.key.height=unit(0.5,"line")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
output = plots
}
plots[[1]] = plot.fun1(height.dia[,c("Date","D","Leafarea")], harvest.data[,c("Date","D","Leafarea")], font.size)
plots[[3]] = plot.fun1(height.dia[,c("Date","D","Leafmass")], harvest.data[,c("Date","D","Leafmass")], font.size)
plots[[5]] = plot.fun1(height.dia[,c("Date","D","Stemmass")], harvest.data[,c("Date","D","Stemmass")], font.size)
plots[[7]] = plot.fun1(height.dia[,c("Date","D","Rootmass")], harvest.data[,c("Date","D","Rootmass")], font.size)
plots[[2]] = plot.fun1(height.dia[,c("Date","Height","Leafarea")], harvest.data[,c("Date","Height","Leafarea")], font.size)
plots[[4]] = plot.fun1(height.dia[,c("Date","Height","Leafmass")], harvest.data[,c("Date","Height","Leafmass")], font.size)
plots[[6]] = plot.fun1(height.dia[,c("Date","Height","Stemmass")], harvest.data[,c("Date","Height","Stemmass")], font.size)
plots[[8]] = plot.fun1(height.dia[,c("Date","Height","Rootmass")], harvest.data[,c("Date","Height","Rootmass")], font.size)
pdf(file = "Output/5.tree_attributes_logscale_over_time.pdf")
grid.arrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]])
grid.arrange(plots[[5]],plots[[6]],plots[[7]],plots[[8]])
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Plot all data  (harvested and predicted) with room (temperature) variation
plots = list()
plots[[1]] = plot.fun1(height.dia[,c("Room","D","Leafarea")], harvest.data[,c("Room","D","Leafarea")], font.size)
plots[[3]] = plot.fun1(height.dia[,c("Room","D","Leafmass")], harvest.data[,c("Room","D","Leafmass")], font.size)
plots[[5]] = plot.fun1(height.dia[,c("Room","D","Stemmass")], harvest.data[,c("Room","D","Stemmass")], font.size)
plots[[7]] = plot.fun1(height.dia[,c("Room","D","Rootmass")], harvest.data[,c("Room","D","Rootmass")], font.size)
plots[[2]] = plot.fun1(height.dia[,c("Room","Height","Leafarea")], harvest.data[,c("Room","Height","Leafarea")], font.size)
plots[[4]] = plot.fun1(height.dia[,c("Room","Height","Leafmass")], harvest.data[,c("Room","Height","Leafmass")], font.size)
plots[[6]] = plot.fun1(height.dia[,c("Room","Height","Stemmass")], harvest.data[,c("Room","Height","Stemmass")], font.size)
plots[[8]] = plot.fun1(height.dia[,c("Room","Height","Rootmass")], harvest.data[,c("Room","Height","Rootmass")], font.size)
pdf(file = "Output/6.tree_attributes_logscale_with_temperature.pdf")
grid.arrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]])
grid.arrange(plots[[5]],plots[[6]],plots[[7]],plots[[8]])
dev.off()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
# Analysing Plant Storage (TNC) partitioning for Cstorage pool prediction
# source("R/TNC_analysis_Duan.R")
# Import TNC data from Duan's experiment
carbohydrates.tnc = read.csv("data/Duan_carbohydrates.csv")
harvest.tnc = read.csv("data/Duan_harvest.csv")
tnc = tnc.analysis(carbohydrates.tnc,harvest.tnc)
#-----------------------------------------------------------------------------------------
data.biomass = read.csv("processed_data/modelled_data.csv")
names(data.biomass) = c("Date","Room","LA","LA_SE","LM","LM_SE","WM","WM_SE","RM","RM_SE")
data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA.csv")
keeps = c("Date","Room","GPP","R_leaf","R_leaf_se","R_stem","R_stem_se","R_root","R_root_se")
data.gpp = data.gpp[ , keeps, drop = FALSE]
names(data.gpp) = c("Date","Room","GPP","R_leaf","R_leaf_SE","R_wood","R_wood_SE","R_root","R_root_SE")
data.all = merge(data.gpp, data.biomass, by=c("Date","Room"), all=TRUE)
# treat.group = as.factor(c("3","6")) # Assign all treatments
treat.group = unique(as.factor(data.all$Room)) # Assign all treatments
# Matching C balance of the entire experiment considering C inputs and outputs
C.balance = data.frame(matrix(ncol = 7, nrow = length(treat.group)))
names(C.balance) = c("Room","C.input","Rm","biomass.growth","growth.resp","C.output","storage")
C.balance$Room = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(Room %in% treat.group[v]))
data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
# plot(data.set$Date, data.set$LM)
C.balance$C.input[v] = sum(data.set$GPP)
C.balance$Rm[v] = sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass.growth[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass.growth[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass.growth[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$C.input[v] - C.balance$C.output[v]
}
View(C.balance)
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:8],legend = c(expression(R[g]),expression(R["m,tot"]),expression(C[s]),expression(C["s,r"]),expression(C["s,w"]),expression(C["s,f"]),expression(C["f,lit"]),expression(C["r,lit"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
bb = barplot(as.matrix(t(C.balance)), ylim=c(0, 50), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:8],legend = c(expression(R[g]),expression(R["m,tot"]),expression(C[s]),expression(C["s,r"]),expression(C["s,w"]),expression(C["s,f"]),expression(C["f,lit"]),expression(C["r,lit"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
C.balance[, c(2:8)]
C.balance[, c(2:7)]
C.balance = data.frame(matrix(ncol = 7, nrow = length(treat.group)))
names(C.balance) = c("Room","GPP","Rm","biomass","growth.resp","C.output","storage")
C.balance$Room = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(Room %in% treat.group[v]))
data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Rm[v] = sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance[, c(3:5,7)]
C.balance.fraction = C.balance[, c(3:5,7)]
View(C.balance.fraction)
C.balance.fraction[,] = C.balance.fraction[,] / C.balance[, 1] * 100
C.balance[, 1] * 100
C.balance.fraction = C.balance[, c(3:5,7)]
C.balance.fraction[,] = C.balance.fraction[,] / C.balance[,2] * 100
row.names(C.balance.fraction) <- c("1","2","3","4","5","6")
colnames(C.balance) <- c("Room", "GPP (g C)", "Rm (g C)", "Cs (g C)", "Rg (g C)", "Cn (g C)")
# Matching C balance of the entire experiment considering C inputs and outputs
C.balance = data.frame(matrix(ncol = 7, nrow = length(treat.group)))
names(C.balance) = c("Room","GPP","Rm","biomass","growth.resp","C.output","storage")
C.balance$Room = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(Room %in% treat.group[v]))
data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Rm[v] = sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance.fraction = C.balance[, c(3:5,7)]
C.balance.fraction[,] = C.balance.fraction[,] / C.balance[,2] * 100
row.names(C.balance.fraction) <- c("1","2","3","4","5","6")
C.balance = C.balance[,-c(6)]
colnames(C.balance) <- c("Room", "GPP (g C)", "Rm (g C)", "Cs (g C)", "Rg (g C)", "Cn (g C)")
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 50), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 120), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.28, 0)))
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
C.balance.fraction = abs(C.balance.fraction)
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.28, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 307), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.28, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 320), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.28, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 330), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.28, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 330), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.2, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 330), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_great.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 330), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:4],legend = c(expression(R["m,tot"]),expression(C[s]),expression(R[g]),expression(C[n])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.17, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
data.biomass = read.csv("processed_data/modelled_data.csv")
names(data.biomass) = c("Date","Room","LA","LA_SE","LM","LM_SE","WM","WM_SE","RM","RM_SE")
data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA.csv")
keeps = c("Date","Room","GPP","R_leaf","R_leaf_se","R_stem","R_stem_se","R_root","R_root_se")
data.gpp = data.gpp[ , keeps, drop = FALSE]
names(data.gpp) = c("Date","Room","GPP","R_leaf","R_leaf_SE","R_wood","R_wood_SE","R_root","R_root_SE")
data.all = merge(data.gpp, data.biomass, by=c("Date","Room"), all=TRUE)
# treat.group = as.factor(c("3","6")) # Assign all treatments
treat.group = unique(as.factor(data.all$Room)) # Assign all treatments
#-------------------------------------------------------------------------------------
#- Matching C balance of the entire experiment considering C inputs and outputs
# source("R/C_balance_great.R")
#-------------------------------------------------------------------------------------
source("R/functions_great.R")
source("R/functions_great_CBM.R")
start <- proc.time() # Start clock
# 3000 chain length is sufficient for the convergance
with.storage = T
# result = CBM.wtc3(chainLength = 3000, no.param.par.var=(nrow(data.all)/4)/30, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Monthly parameters
result = CBM.great(chainLength = 2000, no.param.par.var=2, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Quadratic/Cubic parameters
time_elapsed_series <- proc.time() - start # End clock
result[[6]]
write.csv(result[[6]], "output/bic.csv", row.names=FALSE) # unit of respiration rates: gC per gC plant per day
# Plot parameters and biomass data fit
plot.Modelled.parameters(result,with.storage)
plot.Modelled.biomass(result,with.storage)
source("R/C_balance_great.R")
View(C.balance)
View(C.balance.fraction)
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=2.5) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")"))
data.all$Date = as.Date(data.all$Date)
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=2.5) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")"))
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=2.5) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Temperature Room")
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=2.5) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=2.5) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=rainbow(6)[rank(1:6)])) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=rainbow(6)[rank(1:6)])) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
cbPalette = rainbow(6)[rank(1:6)]
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=cbPalette)) +
geom_point(size=1)
cbPalette = rainbow(6)[rank(1:6)]
ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") + scale_color_manual(values=cbPalette) +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
pdf(file = "Output/GPP.pdf",width=12, height=15)
print (p1)
dev.off()
cbPalette = rainbow(6)[rank(1:6)]
p0 = ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") + scale_color_manual(values=cbPalette) +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
pdf(file = "Output/GPP.pdf",width=12, height=15)
print (p0)
dev.off()
png(file = "Output/GPP.png")
print (p0)
dev.off()
pdf(file = "Output/GPP.png",width=12, height=15)
print (p0)
dev.off()
pdf(file = "Output/GPP.png",width=10, height=10)
print (p0)
dev.off()
pdf(file = "Output/GPP.png",width=10, height=7)
print (p0)
dev.off()
#------------
pdf(file = "Output/GPP.pdf",width=10, height=7)
print (p0)
dev.off()
pdf(file = "Output/GPP.pdf",width=10, height=5)
print (p0)
dev.off()
View(data.all)
View(data.set)
View(C.balance)
write.csv(C.balance, file = "output/C_partitioning_great.csv", row.names = FALSE)
data.biomass = read.csv("processed_data/modelled_data.csv")
names(data.biomass) = c("Date","Room","LA","LA_SE","LM","LM_SE","WM","WM_SE","RM","RM_SE")
data.gpp = read.csv("processed_data/great_daily_carbon_gain_LA.csv")
keeps = c("Date","Room","GPP","R_leaf","R_leaf_se","R_stem","R_stem_se","R_root","R_root_se")
data.gpp = data.gpp[ , keeps, drop = FALSE]
names(data.gpp) = c("Date","Room","GPP","R_leaf","R_leaf_SE","R_wood","R_wood_SE","R_root","R_root_SE")
data.all = merge(data.gpp, data.biomass, by=c("Date","Room"), all=TRUE)
data.all$Date = as.Date(data.all$Date)
View(data.all)
treat.group = unique(as.factor(data.all$Room)) # Assign all treatments
cbPalette = rainbow(6)[rank(1:6)]
p0 = ggplot(data.all, aes(x=Date, y=GPP, group = Room, colour=as.factor(Room))) +
geom_point(size=1) +
geom_line(data = data.all, aes(x = Date, y = GPP, group = Room, colour=as.factor(Room))) +
ylab(expression(GPP~"("*g~C~d^"-1"*")")) +
# xlab("Month") +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g DM)")) +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
labs(colour="Room") + scale_color_manual(values=cbPalette) +
theme_bw() +
# annotate("text", x = min(summary.error.Cpool$Date), y = max(summary.error.Cpool$value), size = 14, label = paste(title[p])) +
# theme(plot.title = element_text(size = 20, face = "bold")) +
theme(legend.title = element_text(colour="black", size=12)) +
theme(legend.text = element_text(colour="black", size = 12)) +
# theme(legend.key.height=unit(0.9,"line")) +
theme(legend.position = c(0.2,0.7)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=12)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 14, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# png(file = "Output/GPP.png")
pdf(file = "Output/GPP.pdf",width=10, height=5)
print (p0)
dev.off()
C.balance = data.frame(matrix(ncol = 7, nrow = length(treat.group)))
names(C.balance) = c("Room","GPP","Rm","biomass","growth.resp","C.output","storage")
C.balance$Room = treat.group
View(C.balance)
v=1
data.set = subset(data.all,(Room %in% treat.group[v]))
View(data.set)
data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set = subset(data.all,(Room %in% treat.group[v]))
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Rm[v] = sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$GPP[v] - C.balance$C.output[v]
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(Room %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Rm[v] = sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance = data.frame(matrix(ncol = 7, nrow = length(treat.group)))
names(C.balance) = c("Room","GPP","Rm","biomass","growth.resp","C.output","storage")
C.balance$Room = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(Room %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c(10:17)] = na.spline(data.set[,c(10:17)])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Rm[v] = 4*sum(data.set$R_leaf * data.set$LM + data.set$R_wood * data.set$WM + data.set$R_root * data.set$RM)
C.balance$biomass[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$growth.resp[v] = 0.3 * C.balance$biomass[v]
C.balance$C.output[v] = C.balance$Rm[v] + C.balance$biomass[v] + C.balance$growth.resp[v]
C.balance$storage[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
